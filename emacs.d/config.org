#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes :comments org :results silent
#+STARTUP: showeverything

# =:tangle yes= not required for this to load correctly from init.el

* stuff to get familiarized with

  - [[https://github.com/technomancy/find-file-in-project][find-file-in-project]]

* shared init

#+BEGIN_SRC emacs-lisp
  (defun path-join (&rest path-seq)
    (concat (mapconcat
       'file-name-as-directory
       (butlast path-seq) "")
      (car (last path-seq))))
  (setq EMACS.D-DIR (path-join "~" ".emacs.d"))

  (set-default-coding-systems 'utf-8)
  (set-language-environment "UTF-8")

  (defun now (&optional return-date-only) (interactive "P") (message (format-time-string (if return-date-only "%Y-%m-%d" "%Y-%m-%d %H:%M:%S"))))
  (defun insert-timestamp (&optional return-date-only)
    "Insert date at current cursor position in current active buffer"
    (interactive "P") (insert (now return-date-only)))

  (setenv "PATH" (concat "~/.nix-profile/bin:" (getenv "PATH")))
  ;; (setq exec-path (split-string (getenv "PATH") path-separator))
  (add-to-list 'exec-path "~/.nix-profile/bin")
#+END_SRC

** package initialization
   
   remember if you update =package-archives= you must run
   =M-x el-get-elpa-build-local-recipes= to refresh the list
   
   #+BEGIN_SRC emacs-lisp
     ;; package management
     (setq package-archives '(
            ("gnu"   . "http://elpa.gnu.org/packages/")
            ("ELPA"  . "http://tromey.com/elpa/")
            ("org"   . "http://orgmode.org/elpa/")
            ("melpa" . "https://melpa.org/packages/")))
     ;; activate all the packages (in particular autoloads)
     (package-initialize)

     ;; https://github.com/dimitri/el-get#readme
     ;; FIXME: OBSOLETE?
     (add-to-list 'load-path "~/dot/emacs.d/el-get/el-get")

     (defun local--init-emacs-package ()
       (require 'package)
       (add-to-list 'package-archives
                    '("melpa" . "http://melpa.org/packages/"))
       (package-refresh-contents)
       (package-initialize))

     ;; use MELPA's el-get
     (unless (require 'el-get nil 'noerror)
       (local--init-emacs-package)
       (package-install 'el-get)
       (require 'el-get))
     (setq package-list (list))

     (unless (package-installed-p 'use-package)
       (local--init-emacs-package)
       (package-install 'use-package))

     (eval-when-compile (require 'use-package))

     ;; (add-to-list 'el-get-recipe-path "~/dot/emacs.d/el-get-user/recipes")

     ;; for MELPA packages
     ;; ref http://stackoverflow.com/questions/23165158/how-do-i-install-melpa-packages-via-el-get
     ;; likely no longer needed as of 2018-01-28
     ;; (require 'el-get-elpa)
     ;; then call el-get-elpa-build-local-recipes

     ;;(package-initialize)

     ;; local sources
     ;; example:
     ;; (setq el-get-sources
     ;;       '((:name magit :after (lambda () (global-set-key (kbd "C-x C-z") 'magit-status)))
     ;;         (:name asciidoc :type elpa :after (lambda () (autoload 'doc-mode "doc-mode" nil t) (add-to-list 'auto-mode-alist '("\\.adoc$" . doc-mode)) (add-hook 'doc-mode-hook '(lambda () (turn-on-auto-fill) (require 'asciidoc)))))
     ;;         (:name lisppaste :type elpa)
     ;;         (:name emacs-goodies-el :type apt-get)))
     ;; (setq my-packages
     ;;       (append '(cssh el-get switch-window vkill google-maps nxhtml xcscope yasnippet)
     ;;        (mapcar 'el-get-source-name el-get-sources)))

     ;; specify package sets to load later
     (setq package-group-list (list))

     (defmacro local--load-packages (&rest package-list)
       (cons
        'progn
        (mapcar
         (lambda (package-name)
           (list 'use-package package-name :ensure t :defer t))
         package-list)))
   #+END_SRC

** UI defaults
   
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t)
     (setq-default
      echo-keystrokes 0.1 ;; = delay for minibuffer display after pressing function key default is 1
      indent-tabs-mode nil
      tab-width 2
      truncate-lines t)
     
     (when
         (functionp 'set-scroll-bar-mode)
       (set-scroll-bar-mode 'right))
   #+END_SRC

** my-keys-minor-mode-map

   #+BEGIN_SRC emacs-lisp
     ;;; custom override keys
     ;;; ref http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs
     (defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")
     (define-minor-mode my-keys-minor-mode
       "A minor mode so that my key settings override annoying major modes."
       t " my-keys" 'my-keys-minor-mode-map)
     (my-keys-minor-mode 1)

     (define-key my-keys-minor-mode-map [M-left] 'windmove-left)
     (define-key my-keys-minor-mode-map [M-right] 'windmove-right)
     (define-key my-keys-minor-mode-map [M-up] 'windmove-up)
     (define-key my-keys-minor-mode-map [M-down] 'windmove-down)

     ;;(define-key my-keys-minor-mode-map [tab] 'yas/expand-from-trigger-key)

     (define-key my-keys-minor-mode-map [s-left] 'windmove-left)
     (define-key my-keys-minor-mode-map [s-right] 'windmove-right)
     (define-key my-keys-minor-mode-map [s-up] 'windmove-up)
     (define-key my-keys-minor-mode-map [s-down] 'windmove-down)
   #+END_SRC
   
* specific init

** os-specific

*** gnu/linux

    #+BEGIN_SRC emacs-lisp
      (when (eq system-type 'gnu/linux)
        ;; use x-clipboard
        (setq x-select-enable-clipboard t)
        (when (display-graphic-p)
          (add-to-list 'default-frame-alist '(width . 100))
          (add-to-list 'default-frame-alist '(height . 60))))
    #+END_SRC

*** darwin

    #+BEGIN_SRC emacs-lisp
      (when (eq system-type 'darwin)
        (when (featurep 'ns)
          ;; for macports
          (setenv "PATH" (concat "/opt/local/bin:/opt/local/sbin:" (getenv "PATH")))
          (setq exec-path (append exec-path '("/opt/local/bin:/opt/local/sbin:")))
  
          ;; turn apple key into Meta
          (setq ns-command-modifier 'meta)
          (if (eq window-system 'mac) (require 'carbon-font))
          (setq ; xwl-default-font "Monaco-12"
           xwl-japanese-font "Hiragino_Kaku_Gothic_ProN")
          (let ((charset-font `((japanese-jisx0208 . ,xwl-japanese-font)
                                (japanese-jisx0208 . ,xwl-japanese-font)
                                ;; (japanese-jisx0212 . ,xwl-japanese-font)
                                )))
                                ;; (set-default-font xwl-default-font)
            (mapc (lambda (charset-font)
                    (set-fontset-font (frame-parameter nil 'font)
                                      (car charset-font)
                                      (font-spec :family (cdr charset-font) :size
                                                 14)))
                  charset-font)))
        (message "using OS X"))
    #+END_SRC

*** TODO deprecate windows-nt

    #+BEGIN_SRC emacs-lisp
      (when (eq system-type 'windows-nt)
        ;; windows only
        (load-file "~/emacs.d/martin-w32-fullscreen.el"))
    #+END_SRC

** system-name

   #+BEGIN_SRC emacs-lisp
     (let ((system-name-org
            (path-join EMACS.D-DIR "system-name"
                       (concat system-name ".org"))))
       (when (file-exists-p system-name-org)
         (org-babel-load-file system-name-org)))
   #+END_SRC

** user-login-name

   #+BEGIN_SRC emacs-lisp
     (let ((user-login-name-org
            (path-join EMACS.D-DIR "user-login-name"
                       (concat user-login-name ".org"))))
       (when (file-exists-p user-login-name-org)
         (org-babel-load-file user-login-name-org)))
   #+END_SRC

* package setup

** common

#+BEGIN_SRC emacs-lisp
  (local--load-packages
   async ;; https://github.com/jwiegley/emacs-async
   auto-complete
   
   color-theme

   csv-mode ;; in elpa, not melpa
   dash
   deadgrep
   deft
   diff-hl
   dirtree
   elscreen
   fic-mode ;; to highlight TODO FIXME BUG etc
   find-file-in-project
   git-timemachine
   ;; google-this

   helm
   helm-org-rifle ;; https://github.com/alphapapa/helm-org-rifle
   helm-projectile
   helm-swoop
   
   htmlize ;; htmlize is needed for syntax highlighting in org-mode html output
   hydra
   ibuffer-vc
   iedit
   
   json-mode
   magit
   multiple-cursors
   muse
   navi-mode
   neotree
   org-brain
   outorg outshine  ;; retire?
   ov ;; overlay

   paredit
   powerline
   project-explorer
   projectile
   request
   revive
   quelpa
   s
   simple-httpd
   skewer-mode ;; js live repl https://github.com/skeeto/skewer-mode
   spinner ;; spinner for ongoing operation
   sqlite
   sr-speedbar ;; file list view in buffer
   string-inflection ;; underscore -> UPCASE -> CapitalCase -> camelCase -> kebab-case
   swiper
   terraform-mode
   transpose-frame
   try
   unbound ;; provides describe-unbound-keys
   undo-tree
   ;; if win-switch works, remove this:
   ;; linkd ;; required for win-switch
   with-editor ;; dependency for magit
   yasnippet
   )
#+END_SRC

** eval-in-repl

   #+BEGIN_SRC emacs-lisp :results silent
     (use-package eval-in-repl
       :ensure t
       :config (progn
                 ;; Shell support
                 (require 'eval-in-repl-shell)

                 ;; Version with opposite behavior to eir-jump-after-eval configuration
                 (defun eir-eval-in-shell2 ()
                   "eval-in-repl for shell script (opposite behavior)
         
                    This version has the opposite behavior to the eir-jump-after-eval
                    configuration when invoked to evaluate a line."
                   (interactive)
                   (let ((eir-jump-after-eval (not eir-jump-after-eval)))
                     (eir-eval-in-shell)))
                 ;; (add-hook 'sh-mode-hook
                 ;;           '(lambda()
                 ;;              (local-set-key (kbd "C-M-<return>") 'eir-eval-in-shell2)))

                 (add-hook 'sh-mode-hook
                           '(lambda()
                              (local-set-key (kbd "C-<return>") 'eir-eval-in-shell)))))


   #+END_SRC

*** eval-in-repl-like for ansi-term

    will only work if ansi-term is in line mode (=C-c C-j=)
    switch back to char mode with =C-c C-k=

    #+BEGIN_SRC emacs-lisp
      (setq local--term-buffer-maximum-size 0)
      (defun local--send-current-line-to-term (prefix)
        ;; prefix to insert output below current line
        (interactive "P")
        (let* ((cur-line (thing-at-point 'line t))
               ;; (process-name "*ansi-term*")
               (process-name "*shell*")
               ;; (cur-line "ls -l\n")
               (cur-buf (current-buffer))
               (shell-buf (get-buffer process-name))
               (cur-point-in-process (let ((rtn (progn (switch-to-buffer shell-buf)
                                                       (point))))
                                       (switch-to-buffer cur-buf)
                                       rtn)))
          (process-send-string
           process-name
           (if (string-match "[ \t\n]*$" cur-line)
               (concat (replace-match "" nil nil cur-line) "\n")
             cur-line))
          (if prefix
              (save-excursion
                ;; hack
                (sleep-for 1)
                (let ((new-point-max (progn (switch-to-buffer shell-buf)
                                            (point-max)))
                      (new-content (progn
                                     (switch-to-buffer shell-buf)
                                     (buffer-substring cur-point-in-process (point-max)))))
                  (switch-to-buffer cur-buf)
                  (end-of-line)
                  (newline)
                  (insert new-content)
                  (insert (format "point: %s\nnew max: %s\nstring: %s\n" cur-point-in-process new-point-max new-content))))
            (progn
              (message "NO PREFIX")
             (next-line)))))
      ;; (local-set-key (kbd "C-<return>") 'local--send-current-line-to-term)
    #+END_SRC

** fiplr (vim-like ctrl-p)

   #+BEGIN_SRC emacs-lisp
     (use-package fiplr
       :ensure t
       :config (setq fiplr-ignored-globs
                     '((directories (".git" ".svn"))
                       (files ("*.jpg" "*.png" "*.zip" "*~"
                               "*.pyc" "*.min.js")))))
   #+END_SRC

** multi-web-mode

   #+BEGIN_SRC emacs-lisp
     (use-package multi-web-mode
       :ensure t
       :defer t
       :config (progn
                 (setq mweb-default-major-mode 'html-mode)
                 (setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                                   (js-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
                                   (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")))
                 (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
                 (multi-web-global-mode 1)))
   #+END_SRC

** win-switch

   allows repeated =other-window= via =C-x o o o ...=
    
   #+BEGIN_SRC emacs-lisp
     (use-package win-switch
       :ensure t
       :bind ("C-x o" . win-switch-dispatch)
       :config (setq win-switch-idle-time 0.3))
   #+END_SRC

** package-common.el

  #+BEGIN_SRC emacs-lisp
    (setq el-get-sources
          '((:name tiddlywiki-org
                   :type git
                   :url "git://github.com/whacked/tiddlywiki-org.git"
                   :features "tiddlywiki-mode")

            (:name ob-shstream
                   :type git
                   :url "git://github.com/whacked/ob-shstream.git"
                   :features "ob-shstream")

            (:name clojure-utils
                   :type git
                   :url "https://github.com/plexus/emacs-clojure-utils.git"
                   :features "clojure-utils")))

    (setq my-packages
          (append
           '(el-get
             ;; NOTE: packages moved to use-package macro
             )
           (mapcar 'el-get-source-name el-get-sources)))

  #+END_SRC

** color themes

   #+BEGIN_SRC emacs-lisp
     (setq package-list
           (delete-dups
            (append package-list
                    '(color-theme-buffer-local
                      load-theme-buffer-local
                      color-theme-solarized
                      ;; color themes, see https://emacsthemes.com/charts/all-time.html
                      alect-themes
                      ample-theme
                      cyberpunk-theme
                      leuven-theme
                      material-theme
                      monokai-theme
                      solarized-theme
                      ujelly-theme
                      zenburn-theme
                      ))))
   #+END_SRC

** conditional package loaders

*** coding.el (:code)

 #+BEGIN_SRC emacs-lisp
   (when t ;; (memq :code package-group-list)
     (setq package-list
           (delete-dups
            (append package-list
                    '(f
                      ess
                      gnuplot-mode
                      graphviz-dot-mode
                      haskell-mode
                      haxe-mode
                      js2-mode
                      json-rpc ;; https://github.com/skeeto/elisp-json-rpc
                      lua-mode
                      markdown-mode
                      matlab-mode
                      ;; nxhtml
                      ob-go ;; https://github.com/pope/ob-go
                      ob-ipython ;; https://github.com/gregsexton/ob-ipython/
                      python-mode
                      pyvenv
                      rainbow-mode
                      rspec-mode
                      ruby-mode
                      yaml-mode
                      zencoding-mode
                      inf-ruby
                      ))))
     (setq my-packages
           (delete-dups
            (append my-packages
                    '(
                      ;; nxhtml
                      )))))
   (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
   (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
 #+END_SRC

*** lispy-stuff.el (:lisp)

 #+BEGIN_SRC emacs-lisp
   (setq package-list
         (delete-dups
          (append package-list
                  '(cider
                    clojure-mode
                    clj-refactor
                    expand-region
                    hy-mode
                    popup
                    queue
                    sibilant-mode
                    inf-clojure
                    seq))))

   (global-set-key (kbd "C-=") 'er/expand-region)
   (autoload 'paredit-mode "paredit" "Minor mode for pseudo-structurally editing Lisp code." t)
   (add-hook 'cider-repl-mode-hook        #'enable-paredit-mode)
   (add-hook 'emacs-lisp-mode-hook        #'enable-paredit-mode)
   (add-hook 'lisp-mode-hook              #'enable-paredit-mode)
   (add-hook 'lisp-interaction-mode-hook  #'enable-paredit-mode)
   (add-hook 'hy-mode-hook                #'enable-paredit-mode)
   (add-hook 'sibilant-mode-hook          #'enable-paredit-mode)
   (add-hook 'clojure-mode-hook           #'enable-paredit-mode)
   (add-hook 'clojurescript-mode-hook     #'enable-paredit-mode)
 #+END_SRC

*** only run on main machine (:unportable)

 #+BEGIN_SRC emacs-lisp
   (when (memq :unportable package-group-list)
     (local--load-packages
      pdf-tools
      ;; org-pdfview
      epc ;; https://github.com/kiwanami/emacs-epc
      ;; swank-js ;; move to el-get?
      ))

 #+END_SRC

*** apply packages
    
 #+BEGIN_SRC emacs-lisp
   ;; install the missing packages
   (dolist (package package-list)
     (unless (package-installed-p package)
       (package-install package)))

   (setq my-packages (delete-dups my-packages))
   (el-get 'sync my-packages)
 #+END_SRC

* usual-environment.el

** revive (resume)

   #+BEGIN_SRC emacs-lisp
     (autoload 'save-current-configuration "revive" "Save status" t)
     (autoload 'resume "revive" "Resume Emacs" t)
     (autoload 'wipe "revive" "Wipe Emacs" t)
   #+END_SRC

** remainder

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("" . "~/dot/emacs.d/emacs-backup")))

  (recentf-mode 1)
  (setq recentf-max-menu-items 100)
  (setq recentf-max-saved-items 200)

  (setq helm-exit-idle-delay 0) ;; fixes "display not ready" https://github.com/emacs-helm/helm/issues/550

  ;; kill process hack
  ;; http://stackoverflow.com/questions/10627289/emacs-internal-process-killing-any-command
  (define-key process-menu-mode-map (kbd "C-k") 'joaot/delete-process-at-point)

  (defun joaot/delete-process-at-point ()
    (interactive)
    (let ((process (get-text-property (point) 'tabulated-list-id)))
      (cond ((and process
                  (processp process))
             (delete-process process)
             (revert-buffer))
            (t
             (error "no process at point!")))))


  ;; (autoload 'dirtree "dirtree" "Add directory to tree view" t)

  ;; ;; perspective mode
  ;; ;; ref: http://emacsrookie.com/2011/09/25/workspaces/
  ;; (persp-mode)
  ;; (defmacro custom-persp (name &rest body)
  ;;   `(let ((initialize (not (gethash ,name perspectives-hash)))
  ;;          (current-perspective persp-curr))
  ;;      (persp-switch ,name)
  ;;      (when initialize ,@body)
  ;;      (setq persp-last current-perspective)))
  ;; (defun custom-persp/org ()
  ;;   (interactive)
  ;;   (custom-persp "@org"
  ;;                 (find-file (first org-agenda-files))))

  ;; prevent special buffers from messing with the current layout
  ;; see: http://www.gnu.org/software/emacs/manual/html_node/emacs/Special-Buffer-Frames.html
  (setq special-display-buffer-names
        '("*grep*" "*tex-shell*" "*Help*" "*Packages*" "*Capture*"))
  (setq special-display-function 'my-special-display-function)
  (defun my-special-display-function (buf &optional args)
    ;; (special-display-popup-frame buf)
    (special-display-popup-frame buf `((height . 40)
                                       ;; (left . ,(+ 40 (frame-parameter (selected-frame) 'left)))
                                       ;; (top . ,(+ 20 (frame-parameter (selected-frame) 'top)))
                                       )))
  (setq default-frame-alist
        '((top . 0) (left . 0)
          (width . 84) (height . 40)))

  ;; new behavior in emacs 24?
  ;; http://superuser.com/questions/397806/emacs-modify-quit-window-to-delete-buffer-not-just-bury-it
  (defadvice quit-window (before quit-window-always-kill)
    "When running `quit-window', always kill the buffer."
    (ad-set-arg 0 t))
  (ad-activate 'quit-window)

  (require 'dabbrev)
  (setq dabbrev-always-check-other-buffers t)
  (setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")

  (eval-after-load 'haxe-mode
    '(define-key haxe-mode-map (kbd "C-c C-c")
       (lambda () (interactive) (compile "make"))))

  ;;; see http://www.emacswiki.org/emacs/DeskTop
  ;;; desktop-override-stale-locks.el begins here
  (defun emacs-process-p (pid)
    "If pid is the process ID of an emacs process, return t, else nil.
  Also returns nil if pid is nil."
    (when pid
      (let* ((cmdline-file (concat "/proc/" (int-to-string pid) "/cmdline")))
        (when (file-exists-p cmdline-file)
          (with-temp-buffer
            (insert-file-contents-literally cmdline-file)
            (goto-char (point-min))
            (search-forward "emacs" nil t)
            pid)))))

  (defadvice desktop-owner (after pry-from-cold-dead-hands activate)
    "Don't allow dead emacsen to own the desktop file."
    (when (not (emacs-process-p ad-return-value))
      (setq ad-return-value nil)))
  ;;; desktop-override-stale-locks.el ends here

  ;; add more hooks here
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(column-number-mode t)
   '(desktop-save-mode t)
   ;; '(dirtree-windata (quote (frame left 0.15 delete)))
   '(global-hl-line-mode t)
   '(hscroll-step 1)
   '(ibuffer-fontification-alist (quote ((10 buffer-read-only font-lock-constant-face) (15 (and buffer-file-name (string-match ibuffer-compressed-file-name-regexp buffer-file-name)) font-lock-doc-face) (20 (string-match "^*" (buffer-name)) font-lock-keyword-face) (25 (and (string-match "^ " (buffer-name)) (null buffer-file-name)) italic) (30 (memq major-mode ibuffer-help-buffer-modes) font-lock-comment-face) (35 (eq major-mode (quote dired-mode)) font-lock-function-name-face) (40 (string-match ".py" (buffer-name)) font-lock-type-face) (45 (string-match ".rb" (buffer-name)) font-lock-string-face) (50 (string-match ".org" (buffer-name)) font-lock-preprocessor-face))))
   ;; '(iswitchb-mode t) ;; causes conflict with helm-mode
   '(line-number-mode t)
   '(matlab-auto-fill nil)
   '(menu-bar-mode nil)
   '(show-paren-mode t)
   '(tool-bar-mode nil)
   '(transient-mark-mode t))

  ;; for smooth scrolling
  (setq scroll-step            1
        scroll-conservatively  10000)

  (when (load "auctex.el" t t t) ;; first t = don't throw error if not exist
    (load "preview-latex.el" nil t t)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq TeX-command-master "latex")
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-save-query t))

  ;;; Don't quit unless you mean it!
  (defun maybe-save-buffers-kill-emacs (really)
    "If REALLY is 'yes', call save-buffers-kill-emacs."
    (interactive "sAre you sure about this? ")
    (if (equal really "yes")
        (progn
          ;; (win-save-all-configurations)
          (save-buffers-kill-emacs))))
  (global-set-key [(control x)(control c)] 'maybe-save-buffers-kill-emacs)
  (defun kill-emacs-NOW-iikara ()
    (interactive)
    (setq kill-emacs-hook nil)
    (kill-emacs))

  (defalias 'visu 'visual-line-mode)

  (defun surround-region-with-tag (tag-name beg end)
    (interactive "sTag name: \nr")
    (save-excursion
      (goto-char end)
      (insert "</" tag-name ">")
      (goto-char beg)
      (insert "<" tag-name ">")))

  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
  (require 'ansi-color)

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)

  (global-set-key "\C-x\C-b" 'ibuffer)
  (setq ibuffer-expert t)
  (add-hook 'ibuffer-mode-hook '(lambda () (ibuffer-auto-mode 1)))
  ;; (setq ibuffer-show-empty-filter-groups nil)
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (ibuffer-do-sort-by-alphabetic)))
  ;; see http://www.emacswiki.org/emacs/IbufferMode#toc3
  ;; Switching to ibuffer puts the cursor on the most recent buffer
  (defadvice ibuffer (around ibuffer-point-to-most-recent) ()
             "Open ibuffer with cursor pointed to most recent buffer name"
             (let ((recent-buffer-name (buffer-name)))
               ad-do-it
               (ibuffer-jump-to-buffer recent-buffer-name)))
  (ad-activate 'ibuffer)

  ;;;; see http://lispuser.net/emacs/emacstips.html
  ;;(defvar *original-dired-font-lock-keywords* dired-font-lock-keywords)
  ;;(defun dired-highlight-by-extensions (highlight-list)
  ;;  "highlight-list accept list of (regexp [regexp] ... face)."
  ;;  (let ((lst nil))
  ;;    (dolist (highlight highlight-list)
  ;;      (push `(,(concat "\\.\\(" (regexp-opt (butlast highlight)) "\\)$")
  ;;              (".+" (dired-move-to-filename)
  ;;               nil (0 ,(car (last highlight)))))
  ;;            lst))
  ;;    (setq dired-font-lock-keywords
  ;;          (append *original-dired-font-lock-keywords* lst))))
  ;;(dired-highlight-by-extensions
  ;;  '(("txt" font-lock-variable-name-face)
  ;;    ("rb" font-lock-string-face)
  ;;    ("org" "lisp" "el" "pl" "c" "h" "cc" font-lock-constant-face)))

  (winner-mode 1)

  (setq slime-multiprocessing t)
  (setq slime-net-coding-system 'utf-8-unix)

  ;; to clear shell in ESS mode
  ;; http://stackoverflow.com/questions/3447531/emacs-ess-version-of-clear-console
  (defun clear-shell ()
    (interactive)
    (let ((old-max comint-buffer-maximum-size))
      (setq comint-buffer-maximum-size 0)
      (comint-truncate-buffer)
      (setq comint-buffer-maximum-size old-max)))
  (put 'set-goal-column 'disabled nil)
  (put 'narrow-to-region 'disabled nil)

  ;; eliminate strange error with this for now
  (defvar warning-suppress-types nil)

  (defadvice balance-windows (around allow-interactive-prefix
                                     (&optional selected-window-only))
    "modify balance-windows so that if given C-u prefix, apply only to (selected-window)"
    (interactive "P")
    (when selected-window-only
      (ad-set-arg 0 (window-parent)))
    ad-do-it)
  (ad-activate 'balance-windows)

  ;; not playing nice with daemon
  ;; -- now launching with -q = bypass
  ;; (when nil
  ;;   (if (display-graphic-p)
  ;;       (color-theme-solarized-light)
  ;;     (color-theme-solarized-dark)))
  ;; (color-theme-initialize)

#+END_SRC

** vim-like movement keys

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-` H") (lambda () (interactive) (move-to-window-line-top-bottom 0)))
     (global-set-key (kbd "C-` M") (lambda () (interactive) (move-to-window-line-top-bottom)))
     (global-set-key (kbd "C-` L") (lambda () (interactive) (move-to-window-line-top-bottom -1)))
   #+END_SRC

** org mode

   if you are getting =Symbol's value as variable is void: org-babel-safe-header-args= errors
   you can try =M-x org-reload= and re-init

 #+BEGIN_SRC emacs-lisp
   (define-key global-map "\C-cl" 'org-store-link)
   (define-key global-map "\C-ca" 'org-agenda)
   (define-key my-keys-minor-mode-map (kbd "M-_") 'org-metaleft)
   (define-key my-keys-minor-mode-map (kbd "M-+") 'org-metaright)
 #+END_SRC




   ;;;;;;;;;;;;;;;;;;;;;;;
   ;; <org mode config> ;;
   ;;;;;;;;;;;;;;;;;;;;;;;

   (require 'org)
   ;; force org-babel src edit to use same window instead of splitting
   (setq org-src-window-setup 'current-window)
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((R . t)
      (python . t)
      (ledger . t)
      (C . t)
      (lua . t)
      (gnuplot . t)
      (emacs-lisp . t)
      (ruby . t)
      (shell . t)
      (clojure . t)
      (lisp . t)
      (haskell . t)
      (dot . t)
      (perl . t)
      ;; (matlab . t)
      (octave . t)
      (org . t)
      (latex . t)
      (ditaa . t)
      (go . t)
      (sqlite . t)
      (shstream . t)
      ))


   (when (locate-library "python-mode")
     (require 'python-mode)
     ;; don't make python-mode launch a shell everytime a .py file is
     ;; loaded
     (setq py-start-run-py-shell nil)
     ;; (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
     ;; (add-to-list 'interpreter-mode-alist '("python" . python-mode))
     ;; (when (executable-find "ipython")
     ;;   (require 'ipython)
     ;;   (setq org-babel-python-mode 'python-mode))
     )

   ;; (setq-default py-split-windows-on-execute-function 'split-window-horizontally)
   (setq-default py-keep-windows-configuration t)

   ;; FIXME
   ;; (setq org-ditaa-jar-path "~/dot/emacs.d/bundle/org-mode/contrib/scripts/ditaa.jar")

   (defun ansi-unansify (beg end)
     "to help fix ansi- control sequences in babel-sh output"
     (interactive (list (point) (mark)))
     (unless (and beg end)
       (error "The mark is not set now, so there is no region"))
     (insert (ansi-color-filter-apply (filter-buffer-substring beg end t))))

   (setq org-log-done t)

   ;;Match org file: links
   ;; old, for iimage-minor-mode
   ;; (add-to-list 'iimage-mode-image-regex-alist
   ;;              (cons (concat "file:\\(~?[]\\[\\(\\),~+./_0-9a-zA-Z -]+\\.\\(GIF\\|JP\\(?:E?G\\)\\|P\\(?:BM\\|GM\\|N[GM]\\|PM\\)\\|SVG\\|TIFF?\\|X\\(?:[BP]M\\)\\|gif\\|jp\\(?:e?g\\)\\|p\\(?:bm\\|gm\\|n[gm]\\|pm\\)\\|svg\\|tiff?\\|x\\(?:[bp]m\\)\\)\\)")  1))
   (define-key global-map (kbd "<f12>") 'org-agenda)
   (defun set-calendar-appt ()
     (save-excursion
       (end-of-buffer)
       (outline-previous-visible-heading 1)
       (backward-char)
       (when (re-search-forward org-ts-regexp nil t)
         (let* ((spl-matched (split-string (match-string 1) " "))
                (date (first spl-matched))
                (time (if (= 3 (length spl-matched)) ;; contains time
                          (third spl-matched)
                        ;; only contains date
                        nil))
                (tm-start (or time "00:00"))
                (alarm "5min")
                (name (save-excursion
                        (end-of-buffer)
                        (outline-previous-visible-heading 1)
                        (backward-char)
                        (when (re-search-forward org-complex-heading-regexp nil t)
                          (replace-regexp-in-string (concat "[[:space:]]*" org-ts-regexp "[[:space:]]*") "" (match-string 4))))))
           (start-process
            "kalarm-process" "*Messages*" "/usr/bin/kalarm"
            "--color"
            "0x00FF00"
            "--time"
            (format "%s-%s" date tm-start)
            "--reminder"
            "0H5M"
            ;; doesn't work :(
            ;; "--play" "/usr/share/sounds/KDE-Im-Sms.ogg"
            "--beep"
            (format "%s" name))))))
   (add-hook 'org-remember-mode-hook '(lambda () (visual-line-mode t)))
   (add-hook 'org-remember-before-finalize-hook 'set-calendar-appt)

   ;;; attempt to use org-capture.
   ;;; remember's work flow is actually more pleasant.
   ;;; in single buffer visible phase, capture:
   ;;; 1. creates split buffer, gets selection
   ;;; 2. fills template in that buffer
   ;;; 3. completes capture in that buffer
   ;;; 4. restores original buffer
   ;;; this is identical to remember
   ;;; in split-buffer phase, capture:
   ;;; 1. opens selection window in non-focused buffer (good)
   ;;; 2. after get selection, fills template in focused buffer,
   ;;; i.e. it switches away from the window where the selection took place (bad)
   ;;; 3. when authoring buffer for capture is open, the previously
   ;;; focused buffer is again put in the split where the template
   ;;; selection screen came up (bad)
   ;;; 4. when finished, layout is restored (expected)
   ;;; the amount of attention shifting is pretty annoying
   ;;;
   ;;;;(define-key global-map "\M-\C-r" 'org-capture)
   ;;;(setq org-capture-templates
   ;;;      '(("t" "Todo" entry (file "~/note/org/todos.org" "Tasks")
   ;;;         "* TODO %?\nAdded: %U" :empty-lines 1)
   ;;;        ("c" "CNE-todo" entry ("~/note/cne/cne.org" "All Todo")
   ;;;         "* TODO [#%^{IMPORTANCE|B}] [%^{URGENCY|5}] %?\nAdded: %U")
   ;;;        ("n" "Nikki" entry (file+headline "~/note/org/nikki.org" "ALL")
   ;;;         "* %U %?\n\n %i\n %a\n\n" :empty-lines 1)
   ;;;        ("s" "State" entry (file "~/note/org/state.org")
   ;;;         "* %U %? " :empty-lines 1)
   ;;;        ("v" "Vocab" plain (file "~/note/org/vocab.org")
   ;;;         "** %U %^{Word}\n%?\n# -*- xkm-export -*-\n" :empty-lines 1)
   ;;;        ;; idea template used to be:
   ;;;        ;; "* %^{Title}\n%?\n  %a"
   ;;;        ;; but org-capture-fill-template calls (delete-other-windows)
   ;;;        ;; and maximizes the template-filling buffer
   ;;;        ;; which is pretty annoying. so simply stop using template prompts
   ;;;        ("i" "Idea" entry (file "~/note/org/idea.org")
   ;;;         "* %?\n  %a" :empty-lines 1)
   ;;;        ("d" "Dump" entry (file+datetree "~/note/org/dump.org")
   ;;;         "* %?\n%U\n" :empty-lines 1)))

   ;;;;;;;;;;;;;;;;;;;;;;;;
   ;; </org mode config> ;;
   ;;;;;;;;;;;;;;;;;;;;;;;;


   ;; thanks to http://kliketa.wordpress.com/2010/08/04/gtklook-browse-documentation-for-gtk-glib-and-gnome-inside-emacs/
   ;NEW;(require 'gtk-look)
   (setq browse-url-browser-function 'browse-url-generic
         browse-url-generic-program "chromium-browser")
   ;;(setq browse-url-browser-function
   ;; '(("file:.*/usr/share/doc/.*gtk.*-doc/.*" . w3m-browse-url)
   ;;   ("." . browse-url-firefox)))

   ;; ref: http://emacs-fu.blogspot.com/2009/11/showing-pop-ups.html
   (defun djcb-popup (title msg &optional icon sound)
     "Show a popup if we're on X, or echo it otherwise; TITLE is the title
   of the message, MSG is the context. Optionally, you can provide an ICON and
   a sound to be played"

     (interactive)
     (if (eq window-system 'x)
         (shell-command (concat "notify-send "

                                (if icon (concat "-i " icon) "")
                                " '" title "' '" msg "'")))
     (when sound (shell-command
                  (concat "mplayer -really-quiet " sound " 2> /dev/null"))))

   ;; the appointment notification facility
   (setq
    appt-message-warning-time 10 ;; warn 10 min in advance
    appt-display-mode-line t     ;; show in the modeline
    appt-display-format 'window) ;; use our func
   (appt-activate 1)              ;; active appt (appointment notification)
   (display-time)                 ;; time display is required for this...
   (setq appt-audible t)

   ;; our little façade-function for djcb-popup
   (defun djcb-appt-display (min-to-app new-time msg)
     (djcb-popup (format "Appointment in %s minute(s)" min-to-app) msg
                 "/usr/share/icons/gnome/32x32/status/appointment-soon.png"
                 "/usr/share/sounds/ubuntu/stereo/phone-incoming-call.ogg"))
   (setq appt-disp-window-function (function djcb-appt-display))

   (defun org-add-appt-after-save-hook ()
     (if ;(string= mode-name "Org")
         (member (buffer-file-name) org-agenda-files)
         (org-agenda-to-appt)))
   (add-hook 'after-save-hook 'org-add-appt-after-save-hook)

    ;; update appt each time agenda opened
   (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)

   (defun kiwon/merge-appt-time-msg-list (time-msg-list)
     "Merge time-msg-list's elements if they have the same time."
     (let* ((merged-time-msg-list (list)))
       (while time-msg-list
         (if (eq (car (caar time-msg-list)) (car (caar (cdr time-msg-list))))
             (setq time-msg-list
                   (cons
                    (append
                     (list (car (car time-msg-list)) ; time
                           (concat (car (cdr (car time-msg-list))) " / "(car (cdr (car (cdr time-msg-list)))))) ; combined msg
                     (cdr (cdr (car time-msg-list)))) ; rest information
                    (nthcdr 2 time-msg-list)))
           (progn (add-to-list 'merged-time-msg-list (car time-msg-list) t)
                  (setq time-msg-list (cdr time-msg-list)))))
       merged-time-msg-list))

   (defun kiwon/org-agenda-to-appt ()
     (prog2
         (setq appt-time-msg-list nil)
         (org-agenda-to-appt)
       (setq appt-time-msg-list (kiwon/merge-appt-time-msg-list appt-time-msg-list))))

   ;; (add-hook 'org-finalize-agenda-hook (function kiwon/org-agenda-to-appt))

   ;; see earlier commits for google calendar interaction
   ;; ref http://article.gmane.org/gmane.emacs.orgmode/27214
   ;; "defadvice org-agenda-add-entry-to-org-agenda-diary-file"

   ;; in case useful: http://jblevins.org/projects/deft/
   ;; Deft is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity.
   (setq deft-extensions '("org" "tid"))
   (setq deft-directory "~/note/org/")
   (setq deft-text-mode 'org-mode)
   (setq deft-recursive t)
   (setq deft-use-filename-as-title t)
   (setq deft-ignore-file-regexp "\\$.+") ;; for ignoring special tiddlers

   (setq desktop-save-mode nil)
   (desktop-change-dir "~/dot/emacs.d")
   (setq desktop-save-mode t)

   ;; org faces
   (custom-set-faces
    '(org-level-1 ((t (:inherit outline-1 :inverse-video t :weight bold :height 2.2 :foreground "brown"   :background "white" :family "Inconsolata"))))
    '(org-level-2 ((t (:inherit outline-2 :inverse-video t :weight bold :height 2.0 :foreground "red"     :background "white" :family "Inconsolata"))))
    '(org-level-3 ((t (:inherit outline-3 :inverse-video t :weight bold :height 1.8 :foreground "orange"  :background "black" :family "Inconsolata"))))
    '(org-level-4 ((t (:inherit outline-4 :inverse-video t :weight bold :height 1.6 :foreground "yellow3" :background "white" :family "Inconsolata"))))
    '(org-level-5 ((t (:inherit outline-5 :inverse-video t :weight bold :height 1.4 :foreground "green4"  :background "white" :family "Inconsolata"))))
    '(org-level-6 ((t (:inherit outline-6 :inverse-video t :weight bold :height 1.2 :foreground "blue"    :background "white" :family "Inconsolata"))))
    '(table-cell ((t (:background "#DD8" :foreground "gray50" :inverse-video nil))))
    '(table-cell-face ((((class color)) (:background "#AA3" :foreground "gray90")))))
 #+END_SRC


*** re-enable org-tempo
    
    this enables shortcut expansions like "<s<TAB>". it is off by default since org 9.2

    #+begin_src emacs-lisp
      (require 'org-tempo)
    #+end_src

*** org capture

    see http://pages.sachachua.com/.emacs.d/Sacha.html#orgheadline56
    http://doc.norang.ca/org-mode.html#Capture
    http://orgmode.org/manual/Template-elements.html
    http://orgmode.org/manual/Capture-templates.html#Capture-templates


    #+BEGIN_SRC emacs-lisp
      ;; (require 'org-drill)

      ;;; org-mode with remember
      ;; (org-remember-insinuate)
      (setq org-directory "~/note/org")
      (setq org-default-notes-file (concat (file-name-as-directory org-directory) "index.org.gpg"))

      ;;(define-key global-map "\C-cr" 'org-remember)
      ;; (define-key global-map "\M-\C-r" 'org-remember)
      (global-set-key (kbd "C-c c") 'org-capture)

      ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
      ;; (setq org-capture-templates
      ;;       (quote (("t" "todo" entry (file "~/git/org/refile.org")
      ;;                "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
      ;;               ("r" "respond" entry (file "~/git/org/refile.org")
      ;;                "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
      ;;               ("n" "note" entry (file "~/git/org/refile.org")
      ;;                "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
      ;;               ("j" "Journal" entry (file+datetree "~/git/org/diary.org")
      ;;                "* %?\n%U\n" :clock-in t :clock-resume t)
      ;;               ("w" "org-protocol" entry (file "~/git/org/refile.org")
      ;;                "* TODO Review %c\n%U\n" :immediate-finish t)
      ;;               ("m" "Meeting" entry (file "~/git/org/refile.org")
      ;;                "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
      ;;               ("p" "Phone call" entry (file "~/git/org/refile.org")
      ;;                "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
      ;;               ("h" "Habit" entry (file "~/git/org/refile.org")
      ;;                "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

      ;; see http://orgmode.org/manual/Template-elements.html

      (setq org-capture-templates
	    '(
	      ;; ("t" "Todo" entry
	      ;;  "~/note/org/todos.org"
	      ;;  "* TODO %?\nAdded: %U" "Main")
	      ;; ("c" "CNE" entry
	      ;;   "~/note/cne/cne.org"
	      ;;  "* TODO %?\nAdded: %U" "All Todo")
	      ;; ("n" "Nikki" entry
	      ;;   "~/note/org/nikki.org"
	      ;;  "* %U %?\n\n %i\n %a\n\n" "ALL")
	      ;; ;; ("State" ?s "* %U %? " "~/note/org/state.org")
	      ;; ("s" "Scholar" entry
	      ;;  "~/note/org/scholar.org"
	      ;;  "* %?\nadded: %U")
	      ;; ("v" "Vocab" entry
	      ;;   "~/note/org/vocab.org"
	      ;;  "* %U %^{Word}\n%?\n# -*- xkm-export -*-\n")
	      ;; ("i" "Idea" entry
	  ;;       "~/note/org/idea.org"
	  ;;      "* %^{Title}\n%?\n  %a\n  %U" "Main")
	  ;;     ;;("Music" ?m "- %? %U\n" "~/note/org/music.org" "good")
	  ;;     ("l" "learn" entry
	  ;;      "omi%?" "~/note/org/learn.org" "captured")
	  ;;     ("m" "mem" "** %U    :drill:\n
	  ;;     :PROPERTIES:
	  ;;     :DATE_ADDED: %U
	  ;;     :SOURCE_URL: %a
	  ;;     :END:
	  ;; \n%i%?" "~/note/org/learn.org" "captured")
	      ("d" "Dump" entry
	       (file+headline "~/note/org/dump.org" "test")
	       )
	      ))
    #+END_SRC



** org-mode conf


   #+BEGIN_SRC emacs-lisp
     (custom-set-variables
      '(org-agenda-restore-windows-after-quit t)
      '(org-catch-invisible-edits "show")
      '(org-agenda-window-setup (quote other-window))
      '(org-drill-optimal-factor-matrix (quote ((2 (2.6 . 2.6) (2.7 . 2.691)) (1 (2.6 . 4.14) (2.36 . 3.86) (2.1799999999999997 . 3.72) (1.96 . 3.58) (1.7000000000000002 . 3.44) (2.5 . 4.0)))))
      ;; '(org-export-blocks (quote ((src org-babel-exp-src-blocks nil) (comment org-export-blocks-format-comment t) (ditaa org-export-blocks-format-ditaa nil) (dot org-export-blocks-format-dot nil))))
      '(org-file-apps (quote ((auto-mode . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . default) ("\\.xoj\\'" . "xournal %s") ("\\.pdf\\'" . "evince %s"))))
      '(org-modules (quote (org-bbdb org-bibtex org-gnus org-info
                                     ;; deprecate, causes problems now
                                     ;; org-jsinfo
                                     org-habit org-irc org-mew org-mhe org-rmail org-vm org-wl org-w3m
                                     ;; inclusion of this seems to cause problems with using
                                     ;; load-theme-buffer-local (but! not color-theme-buffer-local)
                                     ;; org-drill
                                     org-docview)))
      '(org-src-fontify-natively t)
      '(org-startup-folded (quote showeverything))
      '(org-ellipsis "⤵")
      ;; FIXME this probably doesn't work as expected
      '(org-startup-folded nil)
      )
     (setq org-export-coding-system 'utf-8)
   #+END_SRC

*** pdf-tools interaction

    http://matt.hackinghistory.ca/2015/11/11/note-taking-with-pdf-tools/

    #+BEGIN_SRC emacs-lisp
      (when (require 'pdf-tools nil :noerror)
        (pdf-tools-install)
        
        ;; this is stolen from https://github.com/pinguim06/pdf-tools/commit/22629c746878f4e554d4e530306f3433d594a654
        (defun pdf-annot-edges-to-region (edges)
          "Attempt to get 4-entry region \(LEFT TOP RIGHT BOTTOM\) from several edges.
        We need this to import annotations and to get marked-up text, because annotations
        are referenced by its edges, but functions for these tasks need region."

          (let ((left0 (nth 0 (car edges)))
                (top0 (nth 1 (car edges)))
                (bottom0 (nth 3 (car edges)))
                (top1 (nth 1 (car (last edges))))
                (right1 (nth 2 (car (last edges))))
                (bottom1 (nth 3 (car (last edges))))
                (n (safe-length edges)))
            ;; we try to guess the line height to move
            ;; the region away from the boundary and
            ;; avoid double lines
            (list left0
                  (+ top0 (/ (- bottom0 top0) 2))
                  right1
                  (- bottom1 (/ (- bottom1 top1) 2 )))))

        
        (defun pdf-annot-markups-as-org-text (pdfpath &optional title level)
          "Acquire highligh annotations as text, and return as org-heading"

          (interactive "fPath to PDF: ")
          (let* ((outputstring "") ;; the text to be returned
                 (title (or title (replace-regexp-in-string "-" " " (file-name-base pdfpath ))))
                 (level (or level (1+ (org-current-level)))) ;; I guess if we're not in an org-buffer this will fail
                 (levelstring (make-string level ?*)) ;; set headline to proper level
                 (annots (sort (pdf-info-getannots nil pdfpath)  ;; get and sort all annots
                               'pdf-annot-compare-annotations))
                 )
            ;; create the header
            (setq outputstring (concat levelstring " Quotes From " title "\n\n")) ;; create heading

            ;; extract text
            (mapc
             (lambda (annot) ;; traverse all annotations
               (if (eq 'highlight (assoc-default 'type annot))
                   (let* ((page (assoc-default 'page annot))
                          ;; use pdf-annot-edges-to-region to get correct boundaries of highlight
                          (real-edges (pdf-annot-edges-to-region
                                       (pdf-annot-get annot 'markup-edges)))
                          (text (or (assoc-default 'subject annot) (assoc-default 'content annot)
                                    (replace-regexp-in-string "\n" " " (pdf-info-gettext page real-edges nil pdfpath)
                                                              ) ))

                          (height (nth 1 real-edges)) ;; distance down the page
                          ;; use pdfview link directly to page number
                          (linktext (concat "[[pdfview:" pdfpath "::" (number-to-string page)
                                            "++" (number-to-string height) "][" title "]]" ))
                          )
                     (setq outputstring (concat outputstring text " ("
                                                linktext ", " (number-to-string page) ")\n\n"))
                     )))
             annots)
            outputstring ;; return the header
            )
          )
        
        (eval-after-load 'pdf-view
          '(define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)))

    #+END_SRC

** tiddlywiki

#+BEGIN_SRC emacs-lisp :results silent
  (defvar *default-anonymous-tiddler-directory*
    (expand-file-name "/Users/natto/cloudsync/main/note/org/tw/tiddlers/warehouse"))
  (defun new-anonymous-tiddler (&optional reserve-for-future-use)
        "create a new uniquely named tiddler inside designated directory"
        (interactive "P")
        (let* ((title (format-time-string "anonymous tiddler %Y-%m-%d %H:%M:%S"))
               (file-path (concat
                           (file-name-as-directory
                            *default-anonymous-tiddler-directory*)
                           (format-time-string "%Y-%m-%d_%H-%M-%S.tid"))))
          (find-file-literally file-path)
          (insert
           (tiddlywiki-org-mode-tiddler-preamble title)
           "\n\n")
          (tiddlywiki-mode)
          ;; (kill-new (concat "[[file:" file-path "]]"))
          ))
  (defalias 'jog 'new-anonymous-tiddler)
#+END_SRC

* filesync (sync.el)

  #+BEGIN_SRC emacs-lisp :tangle no

    (defun local--sync-note! ()
      (interactive)
      (let ((current-line (count-lines 1 (point)))
            (cur-buf (current-buffer))
            (file-list (list "index.org.gpg" "jp.muse.gpg")))
        (let ((presave-list file-list))
          (while presave-list
            (when (get-buffer (car presave-list))
              (switch-to-buffer (car presave-list))
              (save-buffer))
            (setq presave-list (cdr presave-list))))

        (message (format "syncing now: %s" (now)))

        (cond ((string= system-name "natto-tp")
               ;; (start-process "sync-linode" "*Messages*" "/bin/bash" "sync-linode.sh")
               ;; (start-process "sync" "*Messages*" "rsync" "-au" "--include" "*.gpg" "--exclude" "*" "linode:note/" (expand-file-name "~/note/org/"))
               (start-process "sync-linode" "*Messages*" "/bin/bash" "sync-linode.sh")
               )
              ((string= system-name "Nokia-N900")
               ;; (start-process "sync-linode" "*Messages*" "/bin/sh" "/media/mmc1/mod/syncnote.sh")
               (call-process "/bin/sh" "/media/mmc1/mod/syncnote.sh"))
              ((string= system-name "localhost")
               (start-process "sync" "*Messages*" "/bin/bash" (expand-file-name "~/sync.sh"))))

        (let ((postsave-list file-list))
          (while postsave-list
            (when (get-buffer (car postsave-list))
              (switch-to-buffer (car postsave-list))
              (revert-buffer nil t)
              (outline-show-all))
            (setq postsave-list (cdr postsave-list))))
        
        (switch-to-buffer cur-buf)
        (goto-line current-line)))

    (setq local--sync-interval-S (* 60 10))
    (defun *local--sync-note-repeater* ()
      (sync-note!)
      (run-with-idle-timer (time-add (seconds-to-time sync-interval-S) (current-idle-time)) nil '*sync-note-repeater*))

    (defun local--start-sync ()
      (interactive)
      (setq *sync-note-timer* (run-with-idle-timer sync-interval-S t '*sync-note-repeater*)))

    ;; to cancel:
    (defun local--stop-sync ()
      (interactive)
      (cancel-timer *sync-note-timer*))

    ;; (local--start-sync)
  #+END_SRC


* custom faces

  #+BEGIN_SRC emacs-lisp
    (custom-set-faces
     '(table-cell ((t (:background "#DD8" :foreground "gray50" :inverse-video nil))))
     '(table-cell-face ((((class color)) (:background "#AA3" :foreground "gray90")))))
    ;; (org-babel-load-file (expand-file-name "init.org" user-emacs-directory))
  #+END_SRC


** font

   #+BEGIN_SRC emacs-lisp
     (defun font-exist-p (fontname)
       "Test if this font is exist or not."
       (if (or (not fontname) (string= fontname ""))
           nil
         (if (not (x-list-fonts fontname)) nil t)))

     (let ((font-pair (cond ((font-exist-p "Consolas")
                             '("Consolas" . 10))
                            ((font-exist-p "Monaco")
                             '("Monaco" . 11))
                            ((font-exist-p "Droid Sans Mono")
                             '("Droid Sans Mono" . 11))
                            ((font-exist-p "Deja Vu Sans Mono")
                             '("Deja Vu Sans Mono" . 9))
                            ((font-exist-p "Inconsolata")
                             '("Inconsolata" . 9))
                            ((font-exist-p "Anonymous Pro")
                             '("Anonymous Pro" . 8)))))
       (when font-pair
         (defvar emacs-english-font (car font-pair))
         (let ((font-string (format "%s-%s" emacs-english-font (cdr font-pair))))
           (set-frame-font font-string nil t))
         (add-to-list
          'default-frame-alist
          `(font . ,(format "%s-%s" emacs-english-font (cdr font-pair))))))
   #+END_SRC

** highlight line

   not working

   #+BEGIN_SRC emacs-lisp
     ;; http://stackoverflow.com/a/10239361
     ;; see C-h-f defface for source of this
     (defun set-buffer-local-hl-color ()
       (interactive)
       (custom-declare-face (make-local-variable 'buffer-local-hl-face)
                            '((t :inherit hl-line))
                            "store default global hl-line face"
                            :background "blue"
                            :group 'hl-line)
       (set (make-local-variable 'hl-line-face) 'buffer-local-hl-face))


     ;; see http://stackoverflow.com/questions/17628985/how-to-set-a-buffer-locally-face-attribute-for-a-particular-buffer
     ;; First create new face which is a copy of hl-line-face
     (copy-face 'hl-line 'hl-line-light-face)

     ;; Change what you want in this new face
     (set-face-attribute 'hl-line-light-face nil
                         :box '(:color "papayawhip"))

     ;; The function to use the new face
     (defun set-buffer-local-hl-color ()
       (interactive)
       (set (make-local-variable 'hl-line-face) ; This is how to make it local
            'hl-line-light-face)
       (hl-line-mode))
   #+END_SRC

* utility (from util.el)


  #+BEGIN_SRC emacs-lisp
    (defun sequential-insert-number ()
      (interactive)
      (let* ((beg (string-to-number (read-from-minibuffer "from? ")))
            (end (string-to-number (read-from-minibuffer "to? ")))
            (pref (read-from-minibuffer "prefix? "))
            (post (read-from-minibuffer "postfix? "))

            (cmp (if (< beg end)
                     (defun cmp (x y) (<= beg end))
                     (defun cmp (x y) (>= beg end))))
            (next (if (< beg end)
                     (defun next (x) (+ x 1))
                     (defun next (x) (- x 1)))))

        (while (cmp beg end)
          (setq str_num (format "%s%d%s" pref beg post))
          (insert str_num)
          (let ((len (length str_num)))
            (while (> len 0)
              (backward-char)
              (setq len (- len 1))
              ))
          (next-line)
          (setq beg (next beg)))))


    (defun strtr ()
      (interactive)
      (let* ((str-fr (read-from-minibuffer "from characters? "))
             (str-to (read-from-minibuffer "to characters? "))

             (len-str-fr (length str-fr))
             (len-str-to (length str-to))

             (chr-escape "$")
             (chr-escape-escape (format "%s%s" chr-escape chr-escape))
             )

        (if (= len-str-fr len-str-to)
            (progn
              (message "replacing...")
              ; first escape all control chars in the text
              (beginning-of-buffer)
              (replace-string chr-escape chr-escape-escape)

              ; then escape all replace chars
              (setq ls-str (list str-fr str-to))
              (setq ls-source-buffer ())
              (while ls-str
                (let* ((str-cur (car ls-str))
                       (idx 0)
                       (end (length str-cur))
                       (is-target (= (length ls-str) 1))
                      )
                  (while (< idx end)
                    (beginning-of-buffer)
                    (if is-target
                        (progn
                          (setq chr-source (car ls-source-buffer))
                          (setq chr-target (substring str-cur idx (+ idx 1)))
                          (setq ls-source-buffer (cdr ls-source-buffer))
                          (replace-string chr-source chr-target)
                          )
                      (progn
                        (setq chr-source (substring str-cur idx (+ idx 1)))
                        (setq chr-source-escaped (format "%s%s" chr-escape chr-source))
                        (setq ls-source-buffer (cons chr-source-escaped ls-source-buffer))
                        (replace-string chr-source chr-source-escaped)
                        )
                      )
                    (setq idx (+ idx 1))
                  )

                  (setq ls-str (cdr ls-str))
                  (setq ls-source-buffer (reverse ls-source-buffer))
                  )
                )

              ; then translate all escaped replace chars
              (setq idx 0)
              (beginning-of-buffer)

              ; then de-escape the escape chars
              (beginning-of-buffer)
              (replace-string chr-escape-escape chr-escape)
              (setq ls-source-buffer ())
              )
          (message "NOT EQUAL LENGTH! BYE!")
          )
        )
      )

    ;; probably obviated by align-regexp()
    (defun align-lines-to-expr (pbeg pend)
      "finds the first matching `expr` in the second to last lines in *region* and aligns them to the `expr` in the first line in the *region*"
      (interactive (list (point) (mark)))
      (unless (and pbeg pend)
        (error "The mark is not set now, so there is no region"))
      (save-excursion
        (let ((idx-reference nil)
              (expr (read-from-minibuffer "what character? "))
              (nowbuf (buffer-name))
              (beg (min pbeg pend))
              (end (max pbeg pend)))
          (goto-char beg)
          (while (< (point) end)
            (let* ((line-end (progn
                               (move-end-of-line 1)
                               (- (point) 1)))
                   (line-beg (progn
                               (move-beginning-of-line 1)
                               (- (point) 1)))
                   (string-to-match (substring (buffer-string) line-beg line-end))
                   (idx-match (string-match expr string-to-match))
                   )
              (setq idx-reference (or idx-reference idx-match))
              (unless (or (not idx-match)
                          (<= idx-reference idx-match))
                (move-to-column idx-match)
                (let ((need-to-pad (- idx-reference idx-match)))
                  (setq end (+ end need-to-pad))
                  (insert (format (format "%%%ds" need-to-pad) ""))))
              (next-line))))))



    ;; http://xahlee.org/emacs/elisp_replace_html_entities_command.html
    (defun replace-html-chars-region (start end)
      "Replace some HTML entities in region …."
      (interactive "r")
      (save-restriction
        (narrow-to-region start end)

        (goto-char (point-min))
        (while (search-forward "&lsquo;" nil t) (replace-match "‘" nil t))

        (goto-char (point-min))
        (while (search-forward "&rsquo;" nil t) (replace-match "’" nil t))

        (goto-char (point-min))
        (while (search-forward "&ldquo;" nil t) (replace-match "“" nil t))

        (goto-char (point-min))
        (while (search-forward "&rdquo;" nil t) (replace-match "”" nil t))

        (goto-char (point-min))
        (while (search-forward "&eacute;" nil t) (replace-match "é" nil t))
        ;; more here
        )
      )

    (defun replace-entity-chars-region (start end)
      "Replace special chars with normal chars"
      (interactive "r")
      (save-restriction
        (narrow-to-region start end)

        (goto-char (point-min))
        (while (search-forward "‘" nil t) (replace-match "'" nil t))

        (goto-char (point-min))
        (while (search-forward "’" nil t) (replace-match "'" nil t))

        (goto-char (point-min))
        (while (search-forward "“" nil t) (replace-match "\"" nil t))

        (goto-char (point-min))
        (while (search-forward "”" nil t) (replace-match "\"" nil t))

        (goto-char (point-min))
        (while (search-forward "−" nil t) (replace-match "-" nil t))

        (goto-char (point-min))
        (while (search-forward "–" nil t) (replace-match "-" nil t))

        )
      )

    (defun rev! ()
      (interactive)
      (revert-buffer nil t))
  #+END_SRC



* org interaction + util (from util.el)

  #+BEGIN_SRC emacs-lisp
    ;; ref: http://emacsworld.blogspot.com/2011/05/automatic-screenshot-insertion-in-org.html
    (defun org-screenshot ()
      "Take a screenshot into a time stamped unique-named file in the same directory as the org-buffer and insert a link to this file."
      (interactive)
      (let* ((png-filepath (concat
                            default-directory
                            "img/screenshot/"
                            (format-time-string "%Y-%m-%d_%H%M%S_")
                            (buffer-name) ".png"))
             (base-dir (file-name-directory png-filepath)))
        (unless (file-exists-p base-dir)
          (make-directory base-dir t))
        ;; -s  select window
        ;; -u  use the focused window
        (call-process "scrot" nil nil nil "-u" png-filepath)
        (insert (concat "[[" png-filepath "]]"))
        ;;(org-display-inline-images)
      ))


    ;; see http://nullprogram.com/blog/2013/02/06/
    ;; also see http://stackoverflow.com/questions/12915528/easier-outline-navigation-in-emacs
    (defun org-navigate-mode--get-nav-buffer-name ()
      (concat (buffer-name) "--<nav>"))
    (define-minor-mode org-navigate-mode
      "quick way to nagivate org files via indirect buffer"
      :lighter "my-onav"
      :keymap (let ((map (make-sparse-keymap)))
                (define-key map (kbd "n") 'outline-next-visible-heading)
                (define-key map (kbd "p") 'outline-previous-visible-heading)
                (define-key map (kbd "j") 'outline-next-visible-heading)
                (define-key map (kbd "k") 'outline-previous-visible-heading)
                (define-key map (kbd "l") '(lambda ()
                                             (interactive)
                                             (let* ((nowbuf (current-buffer))
                                                    ;; (headline-at-point (nth 4 (org-heading-components)))
                                                    ;; (target-line-number (line-number-at-pos (org-find-exact-headline-in-buffer headline-at-point)))
                                                    (target-line-number (line-number-at-pos))
                                                    )
                                               (switch-to-buffer-other-window navigation-buffer)
                                               (goto-line target-line-number)
                                               (recenter-top-bottom 1)
                                               (switch-to-buffer-other-window nowbuf))))
                (define-key map (kbd "RET") '(lambda ()
                                               (interactive)
                                               (let ((target-line-number (line-number-at-pos)))
                                                 (switch-to-buffer-other-window navigation-buffer)
                                                 (goto-line target-line-number)
                                                 (recenter-top-bottom 1))))
                map)
      (set (make-local-variable 'base-buffer) (current-buffer))
      (set (make-local-variable 'navigation-buffer-name) (org-navigate-mode--get-nav-buffer-name))
      (if org-navigate-mode
          (progn
            (set (make-local-variable 'navigation-buffer)
                 (make-indirect-buffer base-buffer navigation-buffer-name))
            (split-window-horizontally)
            (other-window 1)
            (switch-to-buffer navigation-buffer)
            (org-mode)
            (outline-show-all)
            (other-window -1)
            (org-content 4)
            (read-only-mode 1)
            (message "hello navigate mode"))
        (progn
          (kill-buffer (get-buffer navigation-buffer-name))
          (delete-window)
          (outline-show-all)
          (read-only-mode 0)
          (message "bye navigate mode"))))

    (defun sconvert--dxdoi-to-org (input-string)
      "convert http://dx.doi.org/blah to org-style doi:blah"
      (concat "doi:" (replace-regexp-in-string "http://dx.doi.org/" "" input-string)))

    (defun org-resolve-citation (&optional input-query-string)
      (interactive)
      ;; (require 'json)
      ;; (require 'request)

      (let ((CROSSREF-URI "http://search.labs.crossref.org")
            ;; http://stackoverflow.com/questions/27910/finding-a-doi-in-a-document-or-page
            (re-doi     "\\b\\(10\\.[0-9]\\{3,\\}\\/[^[:space:]]+\\)\\b")
            ;; see calibre-mode.el for re-citekey regexp logic
            (re-citekey "\\b\\([^ :;,.]+?\\)\\(?:etal\\)?\\([[:digit:]]\\\{4\\\}\\)\\(.*?\\)\\b")
            (default-query-string (sentence-at-point)))

        (if (null input-query-string)
            (setq input-query-string
                  (cond (mark-active
                         (buffer-substring (region-beginning) (region-end)))
                        ((string-match re-doi default-query-string)
                         (match-string 1 default-query-string))
                        (t
                         (read-string (format "search string: ") nil nil nil)))))
        ;; (message (format "%s" input-query-string))

        (quote
         ;; Match many free-form citations to DOIs.
         ;; Resolve citations to DOIs by POSTing a JSON list of free-form citations to this route.
         (request
          (concat CROSSREF-URI "/links")
          :type "POST"
          :parser 'buffer-string
          :data (json-encode (list
                              "M. Henrion, D. J. Mortlock, D. J. Hand, and A. Gandy, \"A Bayesian approach to star-galaxy classification,\" Monthly Notices of the Royal Astronomical Society, vol. 412, no. 4, pp. 2286-2302, Apr. 2011."
                              "Renear 2012"
                              ))
          ;; Be sure to mark the request's content type as JSON by specifying a Content-Type header in the request:
          ;; Content-Type: application/json
          :headers '(("Content-Type" . "application/json"))
          ;; Citations must contain at least three words, those with less will not match. Citations with a low match score will be returned without a potential match. Here's a sample response:
          :success (function*
                    (lambda (&key data &allow-other-keys)
                      (insert (format "%s" data))))))


        (destructuring-bind (key-to-retrieve postproc-fn query-string)
            (cond ((string-match re-doi input-query-string)
                   (list 'title ;; 'fullCitation
                         (lambda (ttl) (concat "/" ttl "/"))
                         (match-string 0 input-query-string)))
                  ((string-match re-citekey input-query-string)
                   (list 'doi
                         'sconvert--dxdoi-to-org
                         (mapconcat
                          'identity
                          (list
                           (match-string 1 input-query-string)
                           (match-string 2 input-query-string)
                           (match-string 3 input-query-string))
                          " ")))
                  (t
                   (list 'doi 'sconvert--dxdoi-to-org input-query-string)))
          
          ;; need to re-bind into lexical scope
          (lexical-let* ((k2r key-to-retrieve)
                         (pfn postproc-fn)
                         (postfunc (function*
                                    (lambda (&key data &allow-other-keys)
                                      ;; (message (format "%s" k2r))
                                      (deactivate-mark)
                                      (let ((res (elt data 0)))
                                        (message (format "%s\n\n'%s' copied to clipboard"
                                                         (cdr (assoc 'fullCitation res))
                                                         ;; (cdr (assoc 'title res))
                                                         ;; (cdr (assoc 'doi res))
                                                         (kill-new (format "%s" (funcall pfn (cdr (assoc k2r res))))))))))))
            (request
             (concat CROSSREF-URI "/dois" "?"
                     (request--urlencode-alist
                      `(("q" . ,query-string) ("page" . "1") ("rows" . "1"))))
             :parser 'json-read ;; 'buffer-string
             :success postfunc)))))

    (global-set-key "\C-cR" 'org-resolve-citation)

    ;; see "../api.el" and "org-isbn.el"
    (defun org-resolve-isbn (&optional input-query-string)
      (interactive)
      (let ((WORLDCAT-BASE-URL "http://www.worldcat.org/webservices/catalog/search/opensearch?"))
        (if (null input-query-string)
            (setq input-query-string
                  (cond (mark-active
                         (buffer-substring (region-beginning) (region-end)))
                        (t
                         (read-string (format "search string: ") nil nil nil)))))
        (lexical-let* ((query-string input-query-string))
          ;; (concat WORLDCAT-BASE-URL
          ;;         (request--urlencode-alist
          ;;          `(("q" . ,query-string) ("count" . "1") ("wskey" . ,WORLDCAT-API-KEY))))
          (request
           (concat WORLDCAT-BASE-URL
                   (request--urlencode-alist
                    `(("q" . ,query-string) ("count" . "1") ("wskey" . ,WORLDCAT-API-KEY))))
           :type "GET"
           :parser (lambda () (libxml-parse-xml-region (point) (point-max)))
           :success (function*
                     (lambda (&key data &allow-other-keys)
                       (let ((get (lambda (node &rest names)
                                    (if names
                                        (apply get
                                               (first (xml-get-children
                                                       node (car names)))
                                               (cdr names))
                                      (first (xml-node-children node))))))
                         (if (funcall get data 'entry 'identifier)
                             (let ((res (format "isbn:%s /%s/\n"
                                                (car (last (split-string (funcall get data 'entry 'identifier) ":")))
                                                ;; (funcall get data 'entry 'author 'name)
                                                (funcall get data 'entry 'title))))
                               (message (kill-new res)))
                           (message "no result")))))))))
    (global-set-key "\C-cI" 'org-resolve-isbn)


    ;; http://stackoverflow.com/questions/15328515/iso-transclusion-in-emacs-org-mode
    ;; http://stackoverflow.com/a/15352203
    (defun org-dblock-write:transclusion (params)
      (progn
        (with-temp-buffer
          (insert-file-contents (plist-get params :filename))
          (let ((range-start (or (plist-get params :min) (line-number-at-pos (point-min))))
                (range-end (or (plist-get params :max) (line-number-at-pos (point-max)))))
            (copy-region-as-kill (line-beginning-position range-start)
                                 (line-end-position range-end))))
        (yank)))


    ;; http://stackoverflow.com/questions/10729639/organizing-notes-with-tags-in-org-mode
    (defun org-tag-match-context (&optional todo-only match)
      "Identical search to `org-match-sparse-tree', but shows the content of the matches."
      (interactive "P")
      (org-agenda-prepare-buffers (list (current-buffer)))
      (org-overview)
      (org-remove-occur-highlights)
      (org-scan-tags '(progn (org-show-entry)
                             (org-show-context))
                     (cdr (org-make-tags-matcher match)) todo-only))


    ;; ref http://stackoverflow.com/questions/6050033/elegant-way-to-count-items
    ;; least dependency and easiest to get working version (Eli Barzilay)
    (defun frequencies (list &optional test key)
      (let* ((test (or test #'equal))
             (h (make-hash-table :test test)))
        (dolist (x list)
          (let ((key (if key (funcall key x) x)))
            (puthash key (1+ (gethash key h 0)) h)))
        (let ((r nil))
          (maphash #'(lambda (k v) (push (cons k v) r)) h)
          (sort r #'(lambda (x y) (< (cdr x) (cdr y)))))))

    ;; ref http://stackoverflow.com/questions/24330980/enumerate-all-tags-in-org-mode
    (defun org-get-tag-histogram ()
      (interactive)
      (let ((all-tags '()))
        (org-map-entries
         (lambda ()
           (let ((tag-string (car (last (org-heading-components)))))
             (when tag-string
               (setq all-tags
                     (append all-tags (split-string tag-string ":" t)))))))
        (let ((histogram (frequencies all-tags)))
          (when (called-interactively-p 'any)
            (message
             (let ((longest-keylen (apply 'max
                                          (mapcar (function (lambda (pair)
                                                              (length (car pair)))) histogram))))
               (mapconcat
                (function (lambda (pair)
                            (format "%s  %s"
                                    (car pair)
                                    (format
                                     (format "%%%dd" (1+ (- longest-keylen (length (car pair)))))
                                     (cdr pair))
                                    )))
                histogram
                "\n"))))
          histogram)))

  #+END_SRC

** helm org

   #+BEGIN_SRC emacs-lisp :results silent
     (require 'subr-x)

     (setq helm-note--base-directory
           (concat
            (file-name-as-directory (getenv "HOME"))
            "note/org"))

     (defun helm-note--get-matches ()
       (cons '()
             (list :title "foo title"
                   :text "foo text")))

     (defun helm-dummy
         (choice)
       (message (format "dummy function: %s" choice)))

     (defun helm-note--test ()
       (interactive)
       (helm
        :sources (list
                  '((name . "matches")
                    (candidates . helm-note--get-matches)
                    (action . (("dummy" . helm-dummy)
                               
                               ))))
        :buffer "*helm-note-search*"))
   #+END_SRC

* other from util.el

** elscreen

   (not loaded by default)

  #+BEGIN_SRC emacs-lisp :tangle no
    ;; elscreen
    (require 'elscreen)
    (load "elscreen" "ElScreen" t)
    (global-set-key (kbd "s-_") 'elscreen-previous)
    (global-set-key (kbd "s-+") 'elscreen-next)
    (setq elscreen-display-tab nil)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle no
    ;; google-this
    ;; (global-set-key (kbd "C-x g") 'google-this-mode-submap)
    (define-key google-this-mode-submap "c" 'google-scholar-search)
    (defun google-scholar-search (prefix)
      "search in google scholar"
      (interactive "P")
      (google-search prefix "http://scholar.google.com/scholar?hl=en&btnG=&as_sdt=1%%2C22&q=%s"))
  #+END_SRC

* assorted fix

** freeze on yank
   
   http://ergoemacs.org/misc/emacs_bug_cant_paste_2015.html

   =(setq x-selection-timeout 300)=

** org mode CJK table alignment

   see http://coldnew.github.io/blog/2013/11-16_d2f3a/ 解決 org-mode 表格內中英文對齊的問題
   
   #+BEGIN_SRC emacs-lisp
     (defvar emacs-cjk-font "Hiragino Sans GB W3"
       "The font name for CJK.")
     
     (defvar emacs-font-size-pair '(13 . 16)
       "Default font size pair for (english . chinese)")

     (defvar emacs-font-size-pair-list
       '(( 5 .  6) (10 . 12)
         (13 . 16) (15 . 18) (17 . 20)
         (19 . 22) (20 . 24) (21 . 26)
         (24 . 28) (26 . 32) (28 . 34)
         (30 . 36) (34 . 40) (36 . 44))
       "This list is used to store matching (englis . chinese) font-size.")
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun set-font (english chinese size-pair)
       "Setup emacs English and Chinese font on x window-system."

       (if (font-exist-p english)
           (set-frame-font (format "%s:pixelsize=%d" english (car size-pair)) t))

       (if (font-exist-p chinese)
           (dolist (charset '(kana han symbol cjk-misc bopomofo))
             (set-fontset-font (frame-parameter nil 'font) charset
                               (font-spec :family chinese :size (cdr size-pair))))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     ;; Setup font size based on emacs-font-size-pair
     ;; (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair)
   #+END_SRC
