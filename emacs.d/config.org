#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes :comments org

* [/] TODO

  - [ ] check if the tangle true header is necessary)


* init

  #+BEGIN_SRC emacs-lisp
    (setq inhibit-splash-screen t)
    (set-default-coding-systems 'undecided-unix)

    (defun now (&optional return-date-only) (interactive "P") (message (format-time-string (if return-date-only "%Y-%m-%d" "%Y-%m-%d %H:%M:%S"))))
    (defun insert-timestamp (&optional return-date-only)
      "Insert date at current cursor position in current active buffer"
      (interactive "P") (insert (now return-date-only)))

    (setenv "PATH" (concat "/opt:/opt/local/bin:" (getenv "PATH")))
    (add-to-list 'load-path "~/dot/emacs.d")
  #+END_SRC

* os-specific


** gnu/linux

  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'gnu/linux)
      ;; use x-clipboard
      (setq x-select-enable-clipboard t)
      ;; <ubuntu-tp customizations> ;;;;;;
      ;;
      (setq user-emacs-directory "~/dot/emacs.d")
      (setq el-get-dir "~/dot/emacs.d/el-get")

      ;; ;; use anthy
      ;; ;; http://www.emacswiki.org/emacs/IBusMode
      ;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/ibus")
      ;; (require 'ibus)
      ;; (add-hook 'after-init-hook 'ibus-mode-on)
      ;; (setq ibus-agent-file-name "/usr/lib/ibus-el/ibus-el-agent")

      (when (display-graphic-p)
        (add-to-list 'default-frame-alist '(width . 100))
        (add-to-list 'default-frame-alist '(height . 60)))


      (defun djcb-opacity-modify (&optional dec)
        "modify the transparency of the emacs frame; if DEC is t,
        decrease the transparency, otherwise increase it in 10%-steps"
        (let* ((alpha-or-nil (frame-parameter nil 'alpha)) ; nil before setting
               (oldalpha (if alpha-or-nil alpha-or-nil 100))
               (newalpha (if dec (- oldalpha 10) (+ oldalpha 10))))
          (when (and (>= newalpha frame-alpha-lower-limit) (<= newalpha 100))
            (modify-frame-parameters nil (list (cons 'alpha newalpha))))))

      ;; C-8 will increase opacity (== decrease transparency)
      ;; C-9 will decrease opacity (== increase transparency
      ;; C-0 will returns the state to normal
      (global-set-key (kbd "C-8") '(lambda()(interactive)(djcb-opacity-modify)))
      (global-set-key (kbd "C-9") '(lambda()(interactive)(djcb-opacity-modify t)))
      (global-set-key (kbd "C-0") '(lambda()(interactive)
                                     (modify-frame-parameters nil `((alpha . 100))))))

  #+END_SRC

** darwin

  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
      (when (file-exists-p (expand-file-name "~/dot/cne.emacs"))
        (load-file (expand-file-name "~/dot/cne.emacs")))
             ;;;;;; <OS X customizations> ;;;;;;
             ;;; turn apple key into Meta
      (when (featurep 'ns)
        (setq ns-command-modifier 'meta)
        (if (eq window-system 'mac) (require 'carbon-font))
        (setq ; xwl-default-font "Monaco-12"
         xwl-japanese-font "Hiragino_Kaku_Gothic_ProN")
        (let ((charset-font `((japanese-jisx0208 . ,xwl-japanese-font)
                              (japanese-jisx0208 . ,xwl-japanese-font)
                              ;; (japanese-jisx0212 . ,xwl-japanese-font)
                              )))
                                            ; (set-default-font xwl-default-font)
          (mapc (lambda (charset-font)
                  (set-fontset-font (frame-parameter nil 'font)
                                    (car charset-font)
                                    (font-spec :family (cdr charset-font) :size
                                               14)))
                charset-font))
        (defun osx-resize-current-window ()
          (interactive)
          (let* ((ncol (string-to-number (read-from-minibuffer "ncol? ")))
                 (nrow (string-to-number (read-from-minibuffer "nrow? "))))
            (set-frame-size (selected-frame) ncol nrow)))
        (defun osx-move-current-window ()
          (interactive)
          (let* ((x (string-to-number (read-from-minibuffer "x? ")))
                 (y (string-to-number (read-from-minibuffer "y? "))))
            (set-frame-position (selected-frame) x y)))
        (defun win:to1 ()
          (interactive)
          (set-frame-size (selected-frame) 200 56)
          (set-frame-position (selected-frame) 0 20))
        (defun win:to2 ()
          (interactive)
          (set-frame-position (selected-frame) 1440 -200)
          (set-frame-size (selected-frame) 268 78))

        ;;(setq ipython-command "/opt/local/bin/ipython")
        ;;(require 'ipython)
        ;;(setq py-python-command-args '( "-colors" "Linux"))
        ;;(require 'python-mode)
        (setenv "PYTHONPATH" "/opt/local/bin/python")

        ;; wtf default path for tex installation...
        (setenv "PATH" (concat "/usr/texbin:/usr/local/bin:" (getenv "PATH")))
        (setq exec-path (append exec-path '("/usr/local/bin")))

        ;; w3m
        ;;(add-to-list 'load-path "/opt/local/share/emacs/site-lisp/w3m")
        ;;(setq w3m-command "/usr/bin/w3m")
        ;;(require 'w3m-load)
        ;;(require 'w3m-e21)
        ;;(provide 'w3m-e23)

        ;;(setenv "PATH" (format "%s:%s" (getenv "PATH") "/usr/texbin:/usr/local/bin"))
        ;;(load "/usr/share/emacs/site-lisp/auctex.el" nil t t)
        ;;(load "/usr/share/emacs/site-lisp/preview-latex.el" nil t t)

             ;;;;;; </OS X customizations> ;;;;;;
        
        )
      (message "using OS X"))

  #+END_SRC




** windows-nt

  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'windows-nt)
      ;; windows only
      (load-file "~/emacs.d/martin-w32-fullscreen.el"))

  #+END_SRC

