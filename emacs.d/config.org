#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes :comments org

* [/] TODO

  - [ ] check if the tangle true header is necessary)


* init

  #+BEGIN_SRC emacs-lisp
    (setq inhibit-splash-screen t)
    (set-default-coding-systems 'undecided-unix)

    (defun now (&optional return-date-only) (interactive "P") (message (format-time-string (if return-date-only "%Y-%m-%d" "%Y-%m-%d %H:%M:%S"))))
    (defun insert-timestamp (&optional return-date-only)
      "Insert date at current cursor position in current active buffer"
      (interactive "P") (insert (now return-date-only)))

    (setenv "PATH" (concat "/opt:/opt/local/bin:" (getenv "PATH")))
    (add-to-list 'load-path "~/dot/emacs.d")
  #+END_SRC

* os-specific


** gnu/linux

  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'gnu/linux)
      ;; use x-clipboard
      (setq x-select-enable-clipboard t)
      ;; <ubuntu-tp customizations> ;;;;;;
      ;;
      (setq user-emacs-directory "~/dot/emacs.d")
      (setq el-get-dir "~/dot/emacs.d/el-get")

      ;; ;; use anthy
      ;; ;; http://www.emacswiki.org/emacs/IBusMode
      ;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/ibus")
      ;; (require 'ibus)
      ;; (add-hook 'after-init-hook 'ibus-mode-on)
      ;; (setq ibus-agent-file-name "/usr/lib/ibus-el/ibus-el-agent")

      (when (display-graphic-p)
        (add-to-list 'default-frame-alist '(width . 100))
        (add-to-list 'default-frame-alist '(height . 60)))


      (defun djcb-opacity-modify (&optional dec)
        "modify the transparency of the emacs frame; if DEC is t,
        decrease the transparency, otherwise increase it in 10%-steps"
        (let* ((alpha-or-nil (frame-parameter nil 'alpha)) ; nil before setting
               (oldalpha (if alpha-or-nil alpha-or-nil 100))
               (newalpha (if dec (- oldalpha 10) (+ oldalpha 10))))
          (when (and (>= newalpha frame-alpha-lower-limit) (<= newalpha 100))
            (modify-frame-parameters nil (list (cons 'alpha newalpha))))))

      ;; C-8 will increase opacity (== decrease transparency)
      ;; C-9 will decrease opacity (== increase transparency
      ;; C-0 will returns the state to normal
      (global-set-key (kbd "C-8") '(lambda()(interactive)(djcb-opacity-modify)))
      (global-set-key (kbd "C-9") '(lambda()(interactive)(djcb-opacity-modify t)))
      (global-set-key (kbd "C-0") '(lambda()(interactive)
                                     (modify-frame-parameters nil `((alpha . 100))))))

  #+END_SRC

** darwin

  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
      (when (file-exists-p (expand-file-name "~/dot/cne.emacs"))
        (load-file (expand-file-name "~/dot/cne.emacs")))
             ;;;;;; <OS X customizations> ;;;;;;
             ;;; turn apple key into Meta
      (when (featurep 'ns)
        (setq ns-command-modifier 'meta)
        (if (eq window-system 'mac) (require 'carbon-font))
        (setq ; xwl-default-font "Monaco-12"
         xwl-japanese-font "Hiragino_Kaku_Gothic_ProN")
        (let ((charset-font `((japanese-jisx0208 . ,xwl-japanese-font)
                              (japanese-jisx0208 . ,xwl-japanese-font)
                              ;; (japanese-jisx0212 . ,xwl-japanese-font)
                              )))
                                            ; (set-default-font xwl-default-font)
          (mapc (lambda (charset-font)
                  (set-fontset-font (frame-parameter nil 'font)
                                    (car charset-font)
                                    (font-spec :family (cdr charset-font) :size
                                               14)))
                charset-font))
        (defun osx-resize-current-window ()
          (interactive)
          (let* ((ncol (string-to-number (read-from-minibuffer "ncol? ")))
                 (nrow (string-to-number (read-from-minibuffer "nrow? "))))
            (set-frame-size (selected-frame) ncol nrow)))
        (defun osx-move-current-window ()
          (interactive)
          (let* ((x (string-to-number (read-from-minibuffer "x? ")))
                 (y (string-to-number (read-from-minibuffer "y? "))))
            (set-frame-position (selected-frame) x y)))
        (defun win:to1 ()
          (interactive)
          (set-frame-size (selected-frame) 200 56)
          (set-frame-position (selected-frame) 0 20))
        (defun win:to2 ()
          (interactive)
          (set-frame-position (selected-frame) 1440 -200)
          (set-frame-size (selected-frame) 268 78))

        ;;(setq ipython-command "/opt/local/bin/ipython")
        ;;(require 'ipython)
        ;;(setq py-python-command-args '( "-colors" "Linux"))
        ;;(require 'python-mode)
        (setenv "PYTHONPATH" "/opt/local/bin/python")

        ;; wtf default path for tex installation...
        (setenv "PATH" (concat "/usr/texbin:/usr/local/bin:" (getenv "PATH")))
        (setq exec-path (append exec-path '("/usr/local/bin")))

        ;; w3m
        ;;(add-to-list 'load-path "/opt/local/share/emacs/site-lisp/w3m")
        ;;(setq w3m-command "/usr/bin/w3m")
        ;;(require 'w3m-load)
        ;;(require 'w3m-e21)
        ;;(provide 'w3m-e23)

        ;;(setenv "PATH" (format "%s:%s" (getenv "PATH") "/usr/texbin:/usr/local/bin"))
        ;;(load "/usr/share/emacs/site-lisp/auctex.el" nil t t)
        ;;(load "/usr/share/emacs/site-lisp/preview-latex.el" nil t t)

             ;;;;;; </OS X customizations> ;;;;;;
        
        )
      (message "using OS X"))

  #+END_SRC




** windows-nt

  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'windows-nt)
      ;; windows only
      (load-file "~/emacs.d/martin-w32-fullscreen.el"))

  #+END_SRC


* package setup

** coding

   #+BEGIN_SRC emacs-lisp
   (setq my-packages (append my-packages '(
         ;; coding
         inf-ruby js2-mode json lua-mode markdown-mode ruby-mode rspec-mode yaml-mode zencoding-mode
         graphviz-dot-mode
         python-mode
         rainbow-mode
         ;; nxhtml
         )))

   #+END_SRC

** lispy stuff

   #+BEGIN_SRC emacs-lisp
     (setq my-packages (append my-packages '(
                                             ;; lispy stuff
                                             queue
                                             paredit
                                             clojure-mode
                                             popup
                                             seq
                                             cider
                                             expand-region
                                             hy-mode
                                             )))

     (add-hook 'cider-repl-mode-hook (lambda ()
                                       (paredit-mode 1)))
     (add-hook 'clojure-mode-hook (lambda ()
                                    (require 'expand-region)
                                    (global-set-key (kbd "C-=") 'er/expand-region)
                                    (paredit-mode 1)))

   #+END_SRC

   
* system-name specific

** tpy

   #+BEGIN_SRC emacs-lisp
     (when (string= "natto-tpy" system-name)
       (load-file "~/dot/emacs.d/custom/full-setup.el"))
     ;; (require 'frame-bufs)
     ;; (frame-bufs-mode t)
   #+END_SRC


** mba
   
   #+BEGIN_SRC emacs-lisp
     (when (string= "natto-mba" system-name)
       (load-file "~/dot/emacs.d/custom/full-setup.el")
       (custom-set-variables
        '(org-file-apps (quote ((auto-mode . emacs)
                                ("\\.mm\\'" . default)
                                ("\\.x?html?\\'" . default)
                                ("\\.xoj\\'" . "xournal %s")
                                ("\\.pdf\\'" . "open -a Preview %s"))))))
   #+END_SRC

** n900 (should archive this)

   #+BEGIN_SRC emacs-lisp
     (when (string= "Nokia-N900" system-name)
       (add-to-list 'load-path "/home/user/.emacs.d/maxframe")
       (require 'maxframe)
       (add-hook 'window-setup-hook 'maximize-frame t)
       (maximize-frame)

       (tool-bar-mode 0)
       (menu-bar-mode 0)
       (setq make-backup-files nil)
                                             ;(add-to-list 'load-path "/home/user/.emacs.d") ;(require 'real-auto-save)
                                             ;(add-hook 'muse-mode-hook 'turn-on-real-auto-save)
                                             ;(add-hook 'org-mode-hook 'turn-on-real-auto-save)
       (setq auto-save-visited-file-name t)

       (set-clipboard-coding-system 'utf-8)
       (setq x-select-enable-clipboard t)
       (setq visual-line-mode t)

       (defun ime ()
         (interactive) (toggle-input-method))
       (defun ime-jp ()
         (interactive) (set-input-method "japanese"))
       (defun ime-zh ()
         (interactive) (set-input-method "chinese-py-b5"))

       (defun note! ()
         (interactive)
         (find-file "/tmp/ramdisk/note/note.muse.gpg")
         (end-of-buffer))

       (defun jp! ()
         (interactive)
         (find-file "/tmp/ramdisk/note/jp.muse.gpg")
         (set-input-method "japanese")
         (end-of-buffer))

       (add-to-list 'load-path "/home/user/.emacs.d/muse-3.20/lisp")
       (require 'muse-mode)
       (add-to-list 'load-path "/media/mmc1/src/org-mode/lisp")
       (add-to-list 'load-path "/media/mmc1/src/org-mode/contrib/lisp")
       (require 'org)
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((python . t)
          (ruby . t)
          (perl . t)
          (emacs-lisp . t)
          (sh . t)))

       (split-window-vertically)
       (note!)
       (muse-mode)
       (other-window 1)
       (jp!)
       (muse-mode)
       (other-window 1)


       (defun gg () (interactive) (beginning-of-buffer))
       (defun G () (interactive) (end-of-buffer))


       (enlarge-window 6)

       (setq newsticker-url-list
             '(("mind brain" "http://www.sciencedaily.com/rss/mind_brain.xml" nil nil nil)
               ))


       (defadvice newsticker-save-item (around override-the-uninformative-default-save-format)
         (interactive)
         (let ((filename ;(read-string "Filename: "
                (concat "~/dropbox-sync/rss/" feed "-"
                        (replace-regexp-in-string "'" ""
                                                  (replace-regexp-in-string "[^a-zA-Z0-9_ -]" "-"
                                                                            (newsticker--title item)))
                        ".muse")));)
           (if (file-exists-p filename)
               (message "file already saved")
             (progn
               (with-temp-buffer
                 (insert
                  (format "** %s - %s\n" (now) (newsticker--title item))
                  (newsticker--link item)
                  "\n\n"
                  (newsticker--desc item))
                 (write-file filename t)
                 (shell-command (concat "sqlite3 /media/mmc1/note/article-cache.db \"SELECT text FROM articletext WHERE url='"
                                        (newsticker--link item) "'\" >> " (replace-regexp-in-string " " "\\\\ " filename))))
               ))

           (when (yes-or-no-p "open article? ")
             ;; (shell-command (concat "python ~/dropbox-sync/rss/scraper.py '" filename "' '" (newsticker--link item) "'"))
             (find-file-other-frame filename)
             (rex-mode)
             )
           ))
       (ad-activate 'newsticker-save-item)

       (defalias 'rss 'newsticker-show-news)
       (custom-set-variables
        ;; custom-set-variables was added by Custom.
        ;; If you edit it by hand, you could mess it up, so be careful.
        ;; Your init file should contain only one such instance.
        ;; If there is more than one, they won't work right.
        '(newsticker-automatically-mark-items-as-old nil)
        '(newsticker-enable-logo-manipulations nil)
        '(newsticker-obsolete-item-max-age 172800)
        '(newsticker-treeview-listwindow-height 5)
        '(newsticker-treeview-treewindow-width 12)
        '(newsticker-url-list-defaults nil))

       (add-hook 'newsticker-treeview-list-mode-hook
                 '(lambda ()
                    (define-key newsticker-treeview-list-mode-map
                      (kbd ".") 'newsticker-treeview-save-item)))

       (defun org-add-appt-after-save-hook ()
         (if (string= mode-name "Org") (org-agenda-to-appt)))
       (add-hook 'after-save-hook 'org-add-appt-after-save-hook)
       (appt-activate 1)

     ;;; org-mode with remember
       (org-remember-insinuate)
       (setq org-default-notes-file "/tmp/ramdisk/note/index.org.gpg")
       (define-key global-map [(control kp-enter)] 'org-remember)
       (define-key global-map (kbd "C-p") 'org-time-stamp)
       (define-key global-map (kbd "<ESC> <up>") '(lambda () (interactive) (other-window -1)))
       (define-key global-map (kbd "<ESC> <down>") 'other-window)

       (setq org-remember-templates
             '(("Todo" ?t "* TODO %?\nAdded: %U" "/tmp/ramdisk/note/index.org.gpg" "N900")
               ))
       (setq org-agenda-files (quote ("/tmp/ramdisk/note/index.org.gpg")))

       (global-set-key [(shift backspace)] 'advertised-undo)
       (global-set-key [(control z)] 'ignore)
                                             ;(global-set-key (kbd "<escape> <up>") '(lambda () (interactive) (other-window -1)))
                                             ;(global-set-key (kbd "<escape> <down>") 'other-window)

       (defalias 'yes-or-no-p 'y-or-n-p)


       (defun set-calendar-appt ()
         (save-excursion
           (end-of-buffer)
           (outline-previous-visible-heading 1)
           (backward-char)
           (when (re-search-forward org-ts-regexp nil t)
             (let* ((spl-matched (split-string (match-string 1) " "))
                    (date (first spl-matched))
                    (time (if (= 3 (length spl-matched)) ;; contains time
                              (third spl-matched)
                            ;; only contains date
                            nil))
                    (tm-start (if time
                                  (concat time ":00")
                                "00:00:00"))
                    (alarm "5min")
                    (name (save-excursion
                            (end-of-buffer)
                            (outline-previous-visible-heading 1)
                            (backward-char)
                            (when (re-search-forward org-complex-heading-regexp nil t)
                              (replace-regexp-in-string (concat "[[:space:]]*" org-ts-regexp "[[:space:]]*") "" (match-string 4))))))

               ;; example call: ./setcal --cal N900 --name test --start  "2012-09-02 16:01:00" --alarm exact
               (start-process "setcalendar-process" "*Messages*" "/home/user/setcal"
                              "--cal"
                              ;; "N900"
                              "gcal"
                              "--name"
                              (format "%s" name)
                              "--start"
                              (format "%s %s" date tm-start)
                              "--alarm"
                              (format "%s" alarm))))))
       (add-hook 'org-remember-mode-hook '(lambda () (visual-line-mode t)))
       (add-hook 'org-remember-before-finalize-hook 'set-calendar-appt)



       (defun newsticker-mind-brain-try-fetch-article-hook (feed item)
         "if FEED is `mind brain', attempt to cache the article content"
         (when (string= feed "mind brain")
           ;; attempt to cache the item
           (start-process "cache-article-process" "*Messages*" "/usr/bin/python" 
                          "/media/mmc1/DropN900/sync/rss/cachearticle.py"
                          (newsticker--link item))))
       (add-hook 'newsticker-new-item-functions 'newsticker-mind-brain-try-fetch-article-hook)

                                             ;(find-file "/media/mmc1/DropN900/sync/rss/janitor.org")

     ;;; This was installed by package-install.el.
     ;;; This provides support for the package system and
     ;;; interfacing with ELPA, the package archive.
     ;;; Move this code earlier if you want to reference
     ;;; packages in your .emacs.
       (when
           (load
            (expand-file-name "~/.emacs.d/elpa/package.el"))
         (package-initialize))
       )
   #+END_SRC

** localhost (default hostname "localhost" for Ubuntu on Android images)

   #+BEGIN_SRC emacs-lisp
     (when (string= "localhost" system-name)
       (custom-set-variables
        '(menu-bar-mode nil)
        '(column-number-mode t)
        '(line-number-mode t)
        '(org-agenda-restore-windows-after-quit t)
        '(org-agenda-window-setup (quote other-window))
        '(org-src-fontify-natively t)
        '(org-startup-folded (quote showeverything))
        '(show-paren-mode t)
        '(tool-bar-mode nil)
        '(transient-mark-mode t))

       (setq make-backup-files nil)
       (setq auto-save-visited-file-name t)

       (set-clipboard-coding-system 'utf-8)
       (setq x-select-enable-clipboard t)
       (setq visual-line-mode t)

       (defalias 'yes-or-no-p 'y-or-n-p)

       (load-file "~/dot/emacs.d/custom/package-management.el")
       (setq my-packages
             '(el-get package
                      ;; put el-get bundled packages here
                      magit muse yaml-mode))
       (el-get 'sync my-packages)

       (setq note-file-dir "/sdcard/Download")

       (defun ime ()
         (interactive) (toggle-input-method))
       (defun ime-jp ()
         (interactive) (set-input-method "japanese"))
       (defun ime-zh ()
         (interactive) (set-input-method "chinese-py-b5"))

       (defun note! ()
         (interactive)
         (find-file (concat note-file-dir "/index.org.gpg"))
         (end-of-buffer))

       (defun jp! ()
         (interactive)
         (find-file (concat note-file-dir "/jp.muse.gpg"))
         ;;(set-input-method "japanese")
         (end-of-buffer))

       (setq default-frame-alist
             '((top . 0) (left . 0)
               (width . 207) (height . 21)))
       (when (display-graphic-p)
         (set-frame-size (selected-frame) 207 21)
         (set-frame-position (selected-frame) 0 0)
         (split-window-horizontally)
         (note!)
         (other-window 1)
         (jp!)
         (other-window 1))

       ;; (global-auto-revert-mode t)

       (load-file "~/dot/emacs.d/custom/sync.el")
       ;; (start-sync)

       (org-remember-insinuate)
       (setq org-default-notes-file (concat note-file-dir "/index.org.gpg"))
       (setq org-agenda-files (list org-default-notes-file))

       ;; customize keymapp
       (setq x-alt-keysym 'meta) ;; fixes Alt key in VNC viewer
       (global-set-key [(shift backspace)] 'undo)
       (define-key global-map (kbd "C-.") 'org-remember)
       (define-key global-map (kbd "C-c m") 'org-remember)
       (define-key global-map (kbd "C-c G") 'end-of-buffer)

       (setq org-remember-templates
             '(("Todo" ?t "* TODO %?\nAdded: %U from mobile" org-default-notes-file "Main")))


       (defun set-calendar-appt ()
         (save-excursion
           (end-of-buffer)
           (outline-previous-visible-heading 1)
           (backward-char)
           (when (re-search-forward org-ts-regexp nil t)
             (let* ((spl-matched (split-string (match-string 1) " "))
                    (date (first spl-matched))
                    (time (if (= 3 (length spl-matched)) ;; contains time
                              (third spl-matched)
                            ;; only contains date
                            nil))
                    (tm-start (or time "00:00"))
                    (ampm (if (> 12 (string-to-int (substring tm-start 0 2))) "AM" "PM"))
                    (alarm "5m")
                    (name (save-excursion
                            (end-of-buffer)
                            (outline-previous-visible-heading 1)
                            (backward-char)
                            (when (re-search-forward org-complex-heading-regexp nil t)
                              (replace-regexp-in-string (concat "[[:space:]]*" org-ts-regexp "[[:space:]]*") "" (match-string 4))))))

               ;; example call: ./setcal --cal N900 --name test --start  "2012-09-02 16:01:00" --alarm exact
               (start-process "setcalendar-process" "*Messages*" "google" "calendar" "add"
                              (format "%s %s at %s %s" name date tm-start ampm)
                              "--reminder"
                              (format "%s" alarm))))))
       (add-hook 'org-remember-mode-hook '(lambda () (visual-line-mode t)))
       (add-hook 'org-remember-before-finalize-hook 'set-calendar-appt))
   #+END_SRC

* custom faces

  #+BEGIN_SRC emacs-lisp
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(org-level-1 ((t (:inherit outline-1 :inverse-video t :weight bold :height 1.6 :family "Verdana"))))
     '(org-level-2 ((t (:inherit outline-2 :inverse-video t :weight bold :height 1.5 :family "Verdana"))))
     '(org-level-3 ((t (:inherit outline-3 :inverse-video t :weight bold :height 1.4 :family "Verdana"))))
     '(org-level-4 ((t (:inherit outline-4 :inverse-video t :weight bold :height 1.3 :family "Verdana"))))
     '(org-level-5 ((t (:inherit outline-5 :inverse-video t :weight bold :height 1.2 :family "Verdana"))))
     '(org-level-6 ((t (:inherit outline-6 :inverse-video t :weight bold :height 1.1 :family "Verdana"))))
     '(table-cell ((t (:background "#DD8" :foreground "gray50" :inverse-video nil))))
     '(table-cell-face ((((class color)) (:background "#AA3" :foreground "gray90")))))
    ;; (org-babel-load-file (expand-file-name "init.org" user-emacs-directory))
  
  #+END_SRC


* assorted fix

** freeze on yank
   
   http://ergoemacs.org/misc/emacs_bug_cant_paste_2015.html

   =(setq x-selection-timeout 300)=
